NOTE: These commands are intended to be run on a Linux environment and have been tested on:
   - Ubuntu 24.04.1 LTS.
   - Bitcoin Core RPC client version v28.1.0.
   - Repository: https://github.com/nikifori/btc-timelocked-scripting

1. Install and configure Bitcoin Core for regtest mode.
2. Start the bitcoind daemon in regtest mode:
   bitcoind -daemon -regtest
3. Set up your Python environment using Anaconda:
   conda create -n p2sh_env python=3.10.16 anaconda
   conda activate p2sh_env
4. Install the required Python dependencies:
   pip install -r requirements.txt
5. (Optional) Reset your regtest chain state by deleting the data directory:
   rm -rf ~/.bitcoin/regtest
6. Ensure your ~/.bitcoin/bitcoin.conf contains:
#####################
   regtest=1
   server=1
   deprecatedrpc=create_bdb

   [regtest]
   maxtxfee=0.01
   fallbackfee=0.001
#####################
7. Create your main wallet:
   bitcoin-cli -regtest createwallet "main_wallet" false false "" false false
8. Generate a sending address and store it for later use:
   send_from_address=$(bitcoin-cli -regtest getnewaddress)
   You will use $send_from_address to mine blocks and send transactions in subsequent steps.
9. Mine 101 blocks to unlock coinbase rewards:
   bitcoin-cli -regtest generatetoaddress 101 "$send_from_address"
10. Check and store your current balance:
    current_balance=$(bitcoin-cli -regtest getbalance)
    echo "Current balance: $current_balance"
    $current_balance shows your available funds.
11. Create a timelocked P2SH address and capture its output:
    timelocked_address=$(python create_timelocked_p2sh.py --key <private_key> --locktime <locktime>)
    Replace <private_key> with your WIF-format key.
    Replace <locktime> with the desired block height or UNIX timestamp.
    You will use $timelocked_address below.
12. Fund the timelocked address with 1 BTC and confirm it:
    bitcoin-cli -regtest sendtoaddress "$timelocked_address" 1.0
    bitcoin-cli -regtest generatetoaddress 1 "$send_from_address"
13. (Optional) Repeat funding if you need multiple UTXOs:
    bitcoin-cli -regtest sendtoaddress "$timelocked_address" <amount>
    bitcoin-cli -regtest generatetoaddress 1 "$send_from_address"
14. Mine 10 additional blocks to advance the chain:
    bitcoin-cli -regtest generatetoaddress 10 "$send_from_address"
15. Check and store the current block count:
    block_count=$(bitcoin-cli -regtest getblockcount)
    echo "Current block count: $block_count"
    Ensure $block_count is still below your <locktime> to test the pre-timelock spend.
16. Create a destination wallet:
    bitcoin-cli -regtest createwallet "dest_wallet" false false "" false false
17. Generate a receiving address and store it:
    destination_address=$(bitcoin-cli -regtest -rpcwallet=dest_wallet getnewaddress "" legacy)
    You will send your timelocked coins here.
18. Attempt to spend before the timelock expires (this should fail):
    python spend_timelocked_p2sh.py --locktime $locktime --private_key "$private_key" --p2sh_address "$timelocked_address" --destination_p2pkh_address "$destination_address"
19. Mine enough blocks to satisfy the timelock:
    bitcoin-cli -regtest generatetoaddress $locktime "$send_from_address"
    This advances the chain to at least block height $locktime.
20. Spend from the timelocked address now that the lock has expired:
    python spend_timelocked_p2sh.py --locktime $locktime --private_key "$private_key" --p2sh_address "$timelocked_address" --destination_p2pkh_address "$destination_address"
21. Verify the transaction is in the mempool:
    bitcoin-cli -regtest getrawmempool
22. Mine one more block to confirm the spend:
    bitcoin-cli -regtest generatetoaddress 1 "$send_from_address"
23. Check the balance at the destination address:
    bitcoin-cli -regtest scantxoutset start "["addr($destination_address)"]"
24. Notes:

    * Replace placeholders (<private_key>, <locktime>, etc.) with real values.
      * example <private_key>="cRvyLwCPLU88jsyj94L7iJjQX5C2f8koG4G2gevN4BeSGcEvfKe9"
      * example <locktime>=200
    * Run all bitcoin-cli commands in the same environment where bitcoind is running.
    * Use the stored variables ($send_from_address, $current_balance, $timelocked_address, $block_count, $destination_address) exactly as shown above.
